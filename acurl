#!/usr/bin/env python3

"""Main for acurl"""

import os
import json
import sys
import time
import subprocess
import requests

HOME_DIR = os.path.expanduser("~")
CONFIG_FOLDER = os.path.join(HOME_DIR, ".config", "acurl")
CONFIG_FILE = os.path.join(CONFIG_FOLDER, "config.json")
TOKEN_FILE = os.path.join(CONFIG_FOLDER, "token.json")

def open_config(config_name=None) -> dict:
    """Open config file"""
    try:
        with open(CONFIG_FILE, 'r') as config_file:
            confs = json.load(config_file)
            return {**confs.get('default', {}), **confs.get(config_name, {})}
    except FileNotFoundError:
        print("No config file found, please create one at {}".format(CONFIG_FILE))
        sys.exit(1)

class TokenApiClient(): # pylint: disable=too-few-public-methods
    """Class to keep token valid whilst making requests"""

    def __init__(self, config):
        self.token_file = self.__open_token_file()
        self.config = config
        if not self.token_file:
            self.__get_token()

    @staticmethod
    def __open_token_file() -> dict:
        try:
            with open(TOKEN_FILE, 'r') as token_file:
                return json.load(token_file)
        except FileNotFoundError:
            return None

    def __get_token(self):
        try:
            url = self.config['authorization_url']
            request_body = self.config['request_body']
        except KeyError:
            print("Invalid config...")
            sys.exit(1)

        token_response = requests.post(url, json=request_body)
        if not token_response.status_code == 200:
            print("Could not fetch token. Received status {} with body {}"
                  .format(token_response.status_code, token_response.json()))
            sys.exit(1)

        token_body = token_response.json()
        token_body['timestamp'] = int(time.time())

        self.__save_token(token_body)

    def __save_token(self, token_body):
        self.token_file = token_body
        with open(TOKEN_FILE, 'w') as token_file:
            json.dump(self.token_file, token_file)

    def __check_token_valid(self) -> bool:
        """Checks whether a token is expired or not"""

        token_ts = self.token_file.get("timestamp", 0)
        token_expired = token_ts + self.token_file.get(
            self.config.get("expiration_field", "expires_in"), 0)

        if token_expired < int(time.time()):
            return False
        return True

    def __token_from_file(self):
        """Returns token field from stored token"""
        try:
            token_field = self.config['token_field']
        except KeyError:
            print("Invalid config")
            sys.exit(1)

        try:
            return self.token_file[token_field]
        except KeyError:
            print("this is a bug")
            sys.exit(1)

    def token(self):
        """Gets valid token"""

        if not self.__check_token_valid():
            print("Invalid token, refreshing...")
            self.__get_token()

        return self.__token_from_file()

def main():
    """Entry point for acurl"""
    config = open_config()
    token_client = TokenApiClient(config)
    token = token_client.token()
    args = ' '.join(sys.argv[1:])
    command = "curl --header 'authorization: Bearer {}' {}".format(token, args)
    subprocess.run(command, shell=True)

if __name__ == '__main__':
    main()
