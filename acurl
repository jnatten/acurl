#!/usr/bin/env python3

"""Main for acurl"""

import os
import json
import sys
import time
import subprocess
import requests

HOME_DIR = os.path.expanduser("~")
CONFIG_FOLDER = os.path.join(HOME_DIR, ".config", "acurl")
CONFIG_FILE = os.path.join(CONFIG_FOLDER, "config.json")
TOKEN_FILE = os.path.join(CONFIG_FOLDER, "token.json")

def deep_merge(source: dict, destination: dict):
    for key, value in source.items():
        if isinstance(value, dict):
            node = destination.setdefault(key, {})
            deep_merge(value, node)
        else:
            if not key in destination:
                destination[key] = value
    return destination

def open_config(config_name=None) -> dict:
    """Open config file"""
    try:
        with open(CONFIG_FILE, 'r') as config_file:
            return json.load(config_file)
    except FileNotFoundError:
        print("No config file found, please create one at {}".format(CONFIG_FILE), file=sys.stderr)
        sys.exit(1)
    except json.decoder.JSONDecodeError:
        print("Config could not be parsed as json, see readme for configuration.", file=sys.stderr)
        sys.exit(1)

def save_config(config):
    with open(CONFIG_FILE, 'w') as config_file:
        json.dump(config, config_file)

class TokenApiClient(): # pylint: disable=too-few-public-methods
    """Class to keep token valid whilst making requests"""

    def __init__(self, config):
        self.config = config
        self.token_file = self.__open_token_file(config.get('env', 'default'))
        if not self.token_file:
            self.__get_token()

    @staticmethod
    def __open_token_file(env) -> dict:
        try:
            with open(TOKEN_FILE, 'r') as token_file:
                return json.load(token_file).get(env, {})
        except FileNotFoundError:
            return {}

    def __get_token(self):
        try:
            url = self.config['authorization_url']
            request_body = self.config['request_body']
        except KeyError:
            print("Invalid config...", file=sys.stderr)
            sys.exit(1)

        token_response = requests.post(url, json=request_body)
        if not token_response.status_code == 200:
            print("Could not fetch token. Received status {} with body {}".format(token_response.status_code, token_response.json()), file=sys.stderr)
            sys.exit(1)

        token_body = token_response.json()
        token_body['timestamp'] = int(time.time())

        self.__save_token(token_body)

    def __save_token(self, token_body):
        try:
            with open(TOKEN_FILE, 'r') as token_file:
                old = json.load(token_file)
        except:
            old = {}

        to_save = {**old, self.config.get('env', 'default'): token_body}

        with open(TOKEN_FILE, 'w') as token_file:
            json.dump(to_save, token_file)
            self.token_file = to_save.get(self.config.get('env', 'default'))

    def __check_token_valid(self) -> bool:
        """Checks whether a token is expired or not"""

        token_ts = self.token_file.get("timestamp", 0)
        token_expired = token_ts + self.token_file.get(
            self.config.get("expiration_field", "expires_in"), 0)

        if token_expired < int(time.time()):
            return False
        return True

    def __token_from_file(self):
        """Returns token field from stored token"""
        try:
            token_field = self.config['token_field']
        except KeyError:
            print("Invalid config", file=sys.stderr)
            sys.exit(1)

        try:
            return self.token_file[token_field]
        except KeyError:
            # TODO: En bug tryner her fordi tokenfile er {} nÃ¥r token.json ikke finnes
            print("this is a bug", file=sys.stderr)
            print(json.dumps(self.token_file, indent=2))
            sys.exit(1)

    def token(self):
        """Gets valid token"""

        if not self.__check_token_valid():
            print("Invalid token, refreshing...", file=sys.stderr)
            self.__get_token()

        return self.__token_from_file()

def main():
    """Entry point for acurl"""
    config = open_config()
    if 'token_field' in config:
        print("You seem to be using old config format, migrating to new...", file=sys.stderr)
        config = {'default': config}
        save_config(config)

    first_arg = sys.argv[1]
    override_config = config.get(first_arg, {})
    arg_start_idx = 2 if override_config else 1
    args = ' '.join(sys.argv[arg_start_idx:])

    default_config = config.get('default', {})
    env_config = config.get(first_arg, {})
    if env_config:
        merged = deep_merge(default_config, env_config)
        parsed_config = {**merged, 'env': first_arg}
    else:
        parsed_config = {**default_config, 'env': 'default'}
    

    token_client = TokenApiClient(parsed_config)
    token = token_client.token()

    command = "curl --header 'authorization: Bearer {}' {}".format(token, args)

    subprocess.run(command, shell=True)

if __name__ == '__main__':
    main()
